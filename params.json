{"name":"CL-DBI","body":"## Usage\r\n\r\n    (defvar *connection*\r\n        (dbi:connect :mysql\r\n                     :database-name \"test\"\r\n                     :username \"nobody\"\r\n                     :password \"1234\"))\r\n\r\n    (let ((query (dbi:prepare *connection*\r\n                   \"SELECT * FROM somewhere WHERE flag = ? OR updated_at > ?\"))\r\n          (result (dbi:execute query 0 \"2011-11-01\")))\r\n      (loop for row = (dbi:fetch result)\r\n            while row\r\n            ;; process \"row\".\r\n            ))\r\n\r\n## Description\r\n\r\nCL-DBI is intended to provide the same interface for each database.\r\n\r\nNot only, you don't have to learn each API of databases anymore, but this layer is especially convenient when you want to use the different database by environment.\r\n\r\nFor example, your application had better to use efficient database such as MySQL on the production environment, but you may want to use SQLite3 on your machine. In that case, all what you have to do is only to rewrite calling `dbi:connect`.\r\n\r\n## Databases\r\n\r\n* SQLite3\r\n* PostgreSQL\r\n* MySQL\r\n\r\n## Installation\r\n\r\nThis library will be available on Quicklisp when ready to use.\r\n\r\n## API\r\n\r\n### User-Level API\r\n\r\n* connect [driver-name &amp; params] =&gt; &lt;dbi-connection&gt;\r\n* disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL\r\n* prepare [conn sql] =&gt; &lt;dbi-query&gt;\r\n* execute [query &amp; params] =&gt; something\r\n* fetch [result] =&gt; a row data as plist\r\n* do-sql [conn sql &amp; params]\r\n* list-all-drivers [] =&gt; (&lt;dbi-driver&gt; ..)\r\n* find-driver [driver-name] =&gt; &lt;dbi-driver&gt;\r\n* with-transaction [conn]\r\n* begin-transaction [conn]\r\n* commit [conn]\r\n* rollback [conn]\r\n\r\n### Driver-Level API\r\n\r\n* &lt;dbi-driver&gt;\r\n* &lt;dbi-connection&gt;\r\n* make-connection [driver params]\r\n* disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL\r\n* prepare [conn sql] =&gt; &lt;dbi-query&gt;\r\n* fetch-using-connection [conn result] =&gt; a row data as plist\r\n* do-sql [conn sql &amp; params]\r\n* execute-using-connection =&gt; something\r\n* escape-sql =&gt; string\r\n* begin-transaction [conn]\r\n* commit [conn]\r\n* rollback [conn]\r\n\r\n## Creating a new driver\r\n\r\nCreate a subclass of &lt;dbi-driver&gt; and implement following methods.\r\n\r\n* make-connection\r\n* disconnect [&lt;dbi-connection&gt;] =&gt; T or NIL\r\n* execute-using-connection\r\n\r\nAnd these methods may be overrided if needed.\r\n\r\n* prepare\r\n* fetch-using-connection\r\n* do-sql\r\n* escape-sql\r\n\r\n## Dependencies\r\n\r\n* cl-annot\r\n* CL-Syntax\r\n* SPLIT-SEQUENCE\r\n* closer-mop\r\n\r\n## Author\r\n\r\n* Eitarow Fukamachi (e.arrows@gmail.com)\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2011 Eitarow Fukamachi (e.arrows@gmail.com)\r\n\r\n# License\r\n\r\nLicensed under the LLGPL License.\r\n","tagline":"Database independent interface for Common Lisp","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}